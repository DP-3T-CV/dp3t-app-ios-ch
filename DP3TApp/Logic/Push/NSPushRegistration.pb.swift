// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: NSPushRegistration.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum NSPushType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ios // = 0
  case and // = 1
  case iod // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .ios
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ios
    case 1: self = .and
    case 2: self = .iod
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ios: return 0
    case .and: return 1
    case .iod: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension NSPushType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [NSPushType] = [
    .ios,
    .and,
    .iod,
  ]
}

#endif  // swift(>=4.2)

struct NSPushRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int32 = 0

  var pushToken: String = String()

  var pushType: NSPushType = .ios

  var deviceID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NSPushType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IOS"),
    1: .same(proto: "AND"),
    2: .same(proto: "IOD"),
  ]
}

extension NSPushRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NSPushRegistration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "pushToken"),
    3: .same(proto: "pushType"),
    4: .same(proto: "deviceId"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.pushToken) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.pushType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.pushToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pushToken, fieldNumber: 2)
    }
    if self.pushType != .ios {
      try visitor.visitSingularEnumField(value: self.pushType, fieldNumber: 3)
    }
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func == (lhs: NSPushRegistration, rhs: NSPushRegistration) -> Bool {
    if lhs.version != rhs.version {
        return false
    }
    if lhs.pushToken != rhs.pushToken {
        return false
    }
    if lhs.pushType != rhs.pushType {
        return false
    }
    if lhs.deviceID != rhs.deviceID {
        return false
    }
    if lhs.unknownFields != rhs.unknownFields {
        return false
    }
    return true
  }
}
